/*
 *The GamePanel class implements the game
 *After starting a game, the user is sent directly into the game, and has to make the first move  
 *When the game ends a dialog window pops up and the user is able to restart the game, go back to the menu page or exit the game
  
  */

package proiect;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import proiect.Window;

public class GamePanel extends JPanel implements ActionListener{
    JButton[] buttons;
	JDialog endGameDialog;
	Window window;
	boolean won;

	
	//-------GamePanel constructor--------
    public GamePanel(Window window) {
        endGameDialog = new EndGameDialog(window,this);

        //-------the 9 buttons-----------
        buttons = new JButton[9];
        for (int i = 0; i < buttons.length; i++) {
            buttons[i] = new JButton("");
            buttons[i].addActionListener(this);
            buttons[i].setFont(new Font("Arial", Font.BOLD, 80)); // sets font size and style
        }

       //------setting the layout-----
        setLayout(new GridLayout(3, 3));

        //-------adding the buttons-------
        for (JButton button : buttons) {
            add(button);
        }
    }
	static int moves=0;//number of moves made in the game

	

	@Override
	public void actionPerformed(ActionEvent e) {
		
		Random rand = new Random();//generating a random number
		boolean JustOneWindow=false;
		
		for(int i=0;i<9;i++) {
			won=false;

			if(e.getSource() == buttons[i]) {
				buttons[i].setText("X");
				buttons[i].setEnabled(false);
				moves++;
			
				//------ the case the user wins---------
				if(moves>4){//if there are not at least 5 moves made in the game it makes no sense to check for a winner
				if(check()>0) {//checking if there is a winner
					
				
					for (JButton button : buttons) {
			            button.setEnabled(false);
				    }
				
					JustOneWindow=true; 
					moves=0;
					won=true;
					showWinner((EndGameDialog) endGameDialog,"You won!");
					endGameDialog.setVisible(true);
					i=9;
			    }
				}
				
				
				//------ the draw case---------
				 if(moves==9 && won==false) {
					 
						for (JButton button : buttons) {
				            button.setEnabled(false);
					    }
						
						JustOneWindow=true; 
					    moves=0;
						showWinner((EndGameDialog) endGameDialog,"draw!");
					    endGameDialog.setVisible(true);
					    won=true;
					    i=9;
				}
				 
				 
			//------ the case the computer wins---------
				 if(won==false) {
				
				int random_position = rand.nextInt(9);
				boolean flag=true;
				while(flag) {//checking for the positions left unused
					 if(buttons[random_position].getText().equals("")) {
						 break;
					 }else {
						 random_position = rand.nextInt(9);
					 }
					 }
				
					try {Thread.sleep(100);} catch (InterruptedException e1) {}
					
					
				     buttons[random_position].setText("O");
				     buttons[random_position].setEnabled(false);
				     moves++;
				  
				     if(moves>4){
						if(check()>0 && JustOneWindow==false) {
							for (JButton button : buttons) {
					            button.setEnabled(false);
						    }
							moves=0;
							showWinner((EndGameDialog) endGameDialog,"You lost!");
							endGameDialog.setVisible(true);
							i=9;
							
							
						}
				  }
				}
			}
				     
				 
				     
				    
			}
	
		
		
		
		
		
			}
	// a function used to display how the game ends
	public void showWinner(EndGameDialog egdialog,String winner) {
		egdialog.TextField.setText(winner);
	}
	
	      
   //a function that check's for a winner
	public int check() {
		int win=0;
		if(buttons[0].getText()=="X" &&
		   buttons[1].getText()=="X" &&
		   buttons[2].getText()=="X"){win++;}
		
		if(buttons[3].getText()=="X" &&
		   buttons[4].getText()=="X" &&
		   buttons[5].getText()=="X"){win++;}
					
		if(buttons[6].getText()=="X" &&
		   buttons[7].getText()=="X" &&
		   buttons[8].getText()=="X"){win++;}
					
		if(buttons[0].getText()=="X" &&
		   buttons[3].getText()=="X" &&
		   buttons[6].getText()=="X"){win++;}
					
		if(buttons[1].getText()=="X" &&
		   buttons[4].getText()=="X" &&
		   buttons[7].getText()=="X"){win++;}
					
		if(buttons[2].getText()=="X" &&
		   buttons[5].getText()=="X" &&
		   buttons[8].getText()=="X"){win++;}
					
		if(buttons[0].getText()=="X" &&
		   buttons[4].getText()=="X" &&
		   buttons[8].getText()=="X"){win++;}
					
		if(buttons[2].getText()=="X" &&
		   buttons[4].getText()=="X" &&
		   buttons[6].getText()=="X"){win++;}
					
		if(buttons[0].getText()=="O" &&
		   buttons[1].getText()=="O" &&
	   	   buttons[2].getText()=="O"){win++;}
				
		if(buttons[3].getText()=="O" &&
		   buttons[4].getText()=="O" &&
		   buttons[5].getText()=="O"){win++;}
							
		if(buttons[6].getText()=="O" &&
		   buttons[7].getText()=="O" &&
		   buttons[8].getText()=="O"){win++;}
							
		if(buttons[0].getText()=="O" &&
		   buttons[3].getText()=="O" &&
		   buttons[6].getText()=="O"){win++;}
							
		if(buttons[1].getText()=="O" &&
		   buttons[4].getText()=="O" &&
		   buttons[7].getText()=="O"){win++;}
							
		if(buttons[2].getText()=="O" &&
		   buttons[5].getText()=="O" &&
		   buttons[8].getText()=="O"){win++;}
							
		if(buttons[0].getText()=="O" &&
		   buttons[4].getText()=="O" &&
		   buttons[8].getText()=="O"){win++;}
							
		if(buttons[2].getText()=="O" &&
		   buttons[4].getText()=="O" &&
		   buttons[6].getText()=="O"){win++;}
			
			return win;
	}
	}


